package oopproject;
import java.time.*;
import java.util.Scanner;

public class DateAndTime {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
				LocalDate date = LocalDate.of(2010, 01, 31);
				LocalDate today = LocalDate.now();
				/*
				 * LocalTime time = LocalTime.now(); ZonedDateTime current =
				 * ZonedDateTime.now(); String formatted =
				 * today.format(DateTimeFormatter.ISO_DATE); ZonedDateTime
				 * currentTimeInParis = ZonedDateTime.now(ZoneId.of("Europe/Paris"));
				 * System.out.println("Number of days " + today.getDayOfMonth());
				 * System.out.println("Number of days " + today.getMonth());
				 * System.out.println("Number of days " + today.getYear());
				 * System.out.println("Time " + time); System.out.println("Hours  " +
				 * time.getHour()); System.out.println("Minutes  " + time.getMinute());
				 * System.out.println("India "+ current); System.out.println(
				 * "Paris time "+ currentTimeInParis); System.out.println("Old date "+
				 * date); System.out.println(formatted);
				 */

				Scanner sc = new Scanner(System.in);
				System.out.println("Enter purchase day(date)");
				int day = sc.nextInt();
				System.out.println("Enter purchase Month");
				int month = sc.nextInt();
				System.out.println("Enter purchase year");
				int year = sc.nextInt();
				System.out.println("Enter Expiry month");
				int wMonth = sc.nextInt();
				System.out.println("Enter Expiry year");
				int wYear = sc.nextInt();
				CalculateDate(LocalDate.of(year, month, day), wMonth, wYear);
				getDuration(date, today);
				sc.close();
				/*
				 * Scanner sc = new Scanner(System.in); System.out.println(
				 * "Enter the time zone"); String zone = sc.nextLine();
				 * 
				 * zonedDateAndTime(zone); sc.close();
				 */
			}

			static void getDuration(LocalDate date, LocalDate today) {
				int d1 = today.getDayOfMonth();
				int m1 = today.getMonthValue();
				int y1 = today.getYear();
				int d2 = date.getDayOfMonth();
				int m2 = date.getMonthValue();
				int y2 = date.getYear();
				System.out.println("Days difference : " + Math.abs(d2 - d1));
				System.out.println("Months difference : " + Math.abs(m2 - m1));
				System.out.println("years difference : " + Math.abs(y2 - y1));
				// Duration between dates,months, years between two dates using Period
				// Class
				/*
				 * Period p = Period.between(date, today); int years = p.getYears(); int
				 * months = p.getMonths(); int days = p.getDays(); System.out.println(
				 * "Difference in days " + days); System.out.println(
				 * "Difference in Months " + months); System.out.println(
				 * "Difference in years " + years);
				 */

			}

			static void CalculateDate(LocalDate date, int months, int years) {
				int days = date.getDayOfMonth();
				int mon = date.getMonthValue();
				int year = date.getYear();
				int newYear = 0;
				int newMonth = 0;
				if ((mon + months) > 12) {
					if (months % 12 == 0) {
						newYear = (months / 12) + year + years;
						newMonth = mon;
					} else {
						newYear = (mon + months) / 12 + year + years;
						newMonth = (int) (mon + months) % 12 + mon - 1;
					}

					System.out.println((mon + months) % 12);
				} else {
					newYear = year + years;
					newMonth = mon + months;
				}
				switch (newMonth) {
				case 2:
					if (date.getDayOfMonth() == 29 || date.getDayOfMonth() == 30 || date.getDayOfMonth() == 31) {
						days = 01;
						newMonth = 3;
					}
					break;
				case 4:
					if (date.getDayOfMonth() == 31) {
						days = 01;
						newMonth = 5;
					}
					break;
				case 6:
					if (date.getDayOfMonth() == 31) {
						days = 01;
						newMonth = 7;
					}
					break;
				case 9:
					if (date.getDayOfMonth() == 31) {
						days = 01;
						newMonth = 9;
					}
					break;
				case 11:
					if (date.getDayOfMonth() == 31) {
						days = 01;
						newMonth = 12;
					}
					break;
				}

				System.out.println(LocalDate.of(newYear, newMonth, days));
			}

			static void zonedDateAndTime(String zone) {
				ZonedDateTime currentTime = ZonedDateTime.now(ZoneId.of(zone));
				System.out.println("Current time in Zone " + zone + " is " + currentTime);
			}

}
package oopproject;
import java.util.Arrays;
import java.util.Scanner;


public class StringOperations {
	static String removeDuplicate(String str, int n) {
		char str3[] = str.toCharArray();
		int index = 0;
		for (int i = 0; i < n; i++)
		{
			int j;
			for (j = 0; j < i; j++)
			{
				if (str3[i] == str3[j])
				{
					break;
				}
			}
			if (j == i)
			{
				str3[index++] = str3[i];
			}
		}
		return String.valueOf(Arrays.copyOf(str3, index));
	}

	static String replaceOddCharacters(String str)
	{
		char[] str1 = str.toCharArray();
		for (int i = 1; i < str1.length; i = i + 2)
		{
			str1[i] = '#';
		}
		String str2 = new String(str1);
		return str2;

	}

	static String replaceOddToUpper(String str)
	{
		char[] str1 = str.toCharArray();
		for (int i = 1; i < str1.length; i = i + 2) 
		{
			str1[i] = Character.toUpperCase(str1[i]);
		}
		String str2 = new String(str1);
		return str2;

	}

	static boolean isPositive(String str)
	{
		char[] str1 = str.toCharArray();
		for(int i=0;i<str1.length;i++)
		{
			for(int j=i+1;j<str1.length;j++)
			{
				if(str1[i]>str1[j])
				{
					//count++;
					return false;
				}
				
			}
		}
return true;
}
	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter a string");
		String str = sc.nextLine();
		/*int n = str.length();
		System.out.println("1.Replace odd positions with #");
		System.out.println("2.Remove duplicate characters in the String");
		System.out.println("3.Change odd characters to upper case");
		System.out.println("4.Add the String to itself");
		System.out.println("Enter choice");
		int ch = sc.nextInt();
		switch (ch) {
		case 1:
			System.out.println(replaceOddCharacters(str));
			break;
		case 2:
			System.out.println(removeDuplicate(str, n));
			break;
		case 3:
			System.out.println(replaceOddToUpper(str));
			break;
		case 4:
			str = str.concat(str);
			System.out.println(str);
			break;

		}

*/		System.out.println(isPositive(str));
		sc.close();
	}

}
package anurag;
import java.util.*;
public class userchoice1 {

Scanner s =new Scanner(System.in);

String name=s.nextLine();
int N=name.length();
char array[]= new char[N];
char array1[]=new char[N];
char array2[]=new char[N];
int i,j;

void display()
{
System.out.println("1.Add to String itself");
System.out.println("2.Replace odd positions with # ");
System.out.println("3.Remove duplicate characters in the String ");
System.out.println("4.Change odd characters to upper case ");
int q=s.nextInt();
switch(q)
{
case 1:

String concatedstring=name+name;
System.out.println("concatedstring="+concatedstring);
break;

case 2:
for(int z=0,j=1,i=0;z<N;z++)
{
while(i<N)
{
array[i]='#';
i=i+2;
break;
}
while(j<N)
{
array[j]=name.charAt(j);
j=j+2;
break;
}
}
for(int k=0;k<N;k++)
{
System.out.print(array[k]);

}
break;

case 3:
int m=1;
array1[0]=name.charAt(0);
for(i=1;i<N;i++)
{
j=0;
int count=0;
while(j<i)
{
if(name.charAt(i)!=name.charAt(j))
{
count++;
}
j++;
}
if(count==i)
{
array1[m]=name.charAt(i);
m++;
}
}
for(int k=0;k<N;k++)
{
System.out.print(array1[k]);

}

break;
case 4:
for(i=0;i<N;i++)
{
if(i%2==0)
{
array2[i]=(char)(name.charAt(i)-32);
}
else
{
array2[i]=name.charAt(i);
}
}
for(int k=0;k<N;k++)
{
System.out.print(array2[k]);

}
break;
default :System.out.println("enter correct number------ ");
break;
}

}



public static void main(String[] args) {

System.out.println("enter the string");
userchoice1 obj=new userchoice1();
obj.display();
}

}

3.2: Create a method that accepts a String and checks if it is a positive string. A string is considered a positive string, if on moving from left to right each character in the String comes after the previous characters in the Alphabetical order.For Example: ANT is a positive String (Since T comes after N and N comes after A). The method should return true if the entered string is positive
package anurag;
import java.util.Arrays;
import java.util.Scanner;
public class Check {
static boolean AlphabeticalOrder(String s) {

int l=s.length();
char ch[]=new char[l];
for(int i=0;i<l;i++) {
ch[i]=s.charAt(i);
}
Arrays.sort(ch) ;
for(int i=0;i<l;i++)                                                          
if(ch[i]!=s.charAt(i))
return false;

return true;
}
public static void main(String[] args) {
// TODO Auto-generated method
Scanner sc=new Scanner(System.in);
System.out.println("enter a string");
String s=sc.next();
if(AlphabeticalOrder(s))
System.out.println("true");
else
System.out.println("false");
sc.close();


}

}


3.3: Create a method to accept date and print the duration in days, months and years with regards to current system date
package anurag;

import java.time.*;
public class DateDuration {

        public void duration()
        {
        LocalDate pdate = LocalDate.of(2014,12,11);
       LocalDate now = LocalDate.now();

       Period dur = Period.between(pdate, now);
      System.out.printf("\nDuration is %d years, %d months and %d days old\n\n",dur.getYears(), dur.getMonths(), dur.getDays());
}
          public static void main(String[] args)
   {
       DateDuration d = new DateDuration();
       d.duration();
   
   
   }
}


3.4: Revise exercise 3.3 to accept two LocalDates and print the duration between dates in days, months and years
package anurag;
import java.util.*;
import java.time.*;
public class differdate {
public static void main(String[] args)
    {
        LocalDate pdate = LocalDate.of(2012, 01, 01);
        LocalDate now = LocalDate.now();
 
        Period diff = Period.between(pdate, now);
 
     System.out.printf("\nDifference is %d years, %d months and %d days old\n\n",
                    diff.getYears(), diff.getMonths(), diff.getDays());
  }
}
3.5: Create a method to accept product purchase date and warrantee period (in terms of months and years). Print the date on which warrantee of product expires.

3.6: Create a method which accept zone id and print the current date and time with respect to given zone. (Hint: Few zones to test your code. America/New_York, Europe/London, Asia/Tokyo, US/Pacific, Africa/Cairo, Australia/Sydney etc.)
 
3.7: Modify Lab assignment 2.3 to perform following functionalities: a) Add a method called calculateAge which should accept person’s date of birth and calculate age of a person.  b) Add a method called getFullName(String firstName, String lastName) which should return full name of a person  Display person details with age and fullname.
 package anurag;

import java.util.Scanner;
public  class Person37 {
public String getFullName(String firstName,String lastname){
String fullname=firstName+lastname;
return fullname;

}


public static void main(String[] args) {
//Person p=new Person("dharani","chinni",'f');

Scanner sc=new Scanner(System.in);
Person37 P=new Person37();
System.out.println("Enter first name");
String firstName=sc.nextLine();
System.out.println("Enter Second name");
String lastName=sc.nextLine();
  String result=P.getFullName(firstName,lastName);
  System.out.println(result);
       sc.close();
}

}
